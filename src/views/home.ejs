<!DOCTYPE html>
<html>

<head>
  <title>Home Page</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.2.1/axios.min.js"></script>
  <link rel="icon" type="image/x-icon" href="/favicon-icon.png" />
</head>
<style>
  main {
    padding: 20px;
  }

  .cards {
    text-align: center;
    list-style: none;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
  }

  .card {
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin: 10px;
    width: 300px;
    position: relative;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    transition: 0.3s;
    position: relative;
  }

  .card:hover {
    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
  }

  .card:hover .reference-btn {
    display: block;
  }

  .reference-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    display: none;
    background-color: rgba(0, 0, 0, 0.5);
    color: #fff;
    padding: 8px 12px;
    border-radius: 50%;
    text-decoration: none;
  }

  .card img {
    max-width: 100%;
  }

  .card .items {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 10px;
  }

  .card h3 {
    margin: 0;
  }

  .card p {
    margin: 5px 0;
    font-size: 0.9em;
  }

  .card .actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 10px;
  }

  .card .actions button {
    border: none;
    border-radius: 5px;
    background-color: #333;
    color: #fff;
    padding: 8px 16px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 14px;
    margin: 4px 2px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .card .actions button:hover {
    background-color: #555;
  }

  .overlay-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #000000;
    color: #fff;
    padding: 10px 20px;
    font-size: 20px;
    text-align: center;
  }

  .card .items {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 10px;
  }

  .card .items .totals {
    display: flex;
    gap: 10px;
  }

  .card .items .totals p {
    margin: 0;
    font-size: 0.8em;
    color: #666;
  }
</style>

<body>
  <%- include("navbar") %>

  <main>
    <ul class="cards">
      <% ads.forEach(function(ad) { %>
      <li class="card">
        <div class="image_container">
          <img src="https://begi.uz/images/<%= ad.image %>" alt="Ad image" />
          <% if (ad.active) { %>
          <div class="overlay-text" id="active">Active</div>
          <% } %>
        </div>
        <div class="items">
          <h3>
            <a href="<%= ad.link %>" target="_blank" rel="noopener noreferrer">link <i class="fa-solid fa-arrow-right"> </i></a>
          </h3>
          <h3>| <%= ad.location %> |</h3>
          <div class="totals">
            <p>Views: <%= ad.totalViews %></p>
            <p>Clicks: <%= ad.totalClicks %></p>
          </div>
        </div>
        <div class="actions">
          <% if(!ad.active) { %>
          <button class="select btn" id="select_<%= ad._id %>">Select</button>
          <% } else { %>
          <button class="select btn" id="deselect_<%= ad._id %>">Deselect</button>
          <% } %>
          <button class="edit btn" id="edit_<%= ad._id %>">Edit</button>
          <button class="delete btn" id="delete_<%= ad._id %>">Delete</button>
        </div>
        <a href="/analytics/<%= ad._id %>" class="reference-btn" title="View Analytics">
          <i class="fa-solid fa-chart-line"></i>
        </a>
      </li>
      </div>
      <% }) %>
    </ul>
  </main>
  <script>
    const API = 'https://begi.uz';

    const buttons = document.querySelectorAll(".btn");
    const actives = document.querySelectorAll("#active");

    const tokenHome = localStorage.getItem("token");

    if (!tokenHome) {
      Swal.fire("Error", "Please login first", "error");
      window.location.href = "/login";
    }

    buttons.forEach((button) => {
      button.addEventListener("click", async (event) => {
        event.preventDefault();
        try {
          const id = event.target.id.split("_")[1];
          const action = event.target.id.split("_")[0];
          const status = action == "deselect" ? false : true;

          switch (action) {
            case "deselect":
              const response = await axios.put(`/active?id=${id}&active=${status}`, null, {
                headers: {
                  authorization: tokenHome,
                },
              });
              if (response.status === 200) {
                window.location.href = "/?token=" + tokenHome;;
              }
              break;
            case "select":
              const res = await axios.put(`/active?id=${id}&active=${status}`, null, {
                headers: {
                  authorization: tokenHome,
                },
              });
              if (res.status === 200) {
                window.location.href = "/?token=" + tokenHome;
              }
              break;
            case "edit":
              window.location.href = "/edit/" + id + "?token=" + tokenHome;
              break;
            case "delete":
              Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
              }).then(async (result) => {
                if (result.isConfirmed) {
                  await axios.delete(`/delete?id=${id}`, {
                    headers: {
                      authorization: tokenHome,
                    },
                  })
                  Swal.fire({
                    title: "Deleted!",
                    text: "Your file has been deleted.",
                    icon: "success"
                  });
                  window.location.reload();
                }
              }).catch(err => {
                console.log(err);
              })
              break;
          }
        } catch (err) {
          console.log(err)
        }
      })
    });

    (async () => {
      const {
        ads,
        totalViews,
        totalClicks
      } = await getAds();

      // Create a new element to display the totals
      const totalsElement = document.createElement('div');
      totalsElement.innerHTML = `
    <div class="totals">
      <p>Total Views: ${totalViews}</p>
      <p>Total Clicks: ${totalClicks}</p>
    </div>
  `;

      // Append the new element to the main element
      const mainElement = document.querySelector('main');
      mainElement.appendChild(totalsElement);
    })();

    async function getAds() {
      try {
        const ads = await axios.get(`${API}/get-ads`);
        const adsWithTotals = ads.data.map(ad => {
          const totalViews = getTotalViews(ad.dailyClicksViews, ad.monthlyClicksViews);
          const totalClicks = getTotalClicks(ad.dailyClicksViews, ad.monthlyClicksViews);
          return {
            ...ad,
            totalViews,
            totalClicks
          };
        });

        const totalViews = adsWithTotals.reduce((sum, ad) => sum + ad.totalViews, 0);
        const totalClicks = adsWithTotals.reduce((sum, ad) => sum + ad.totalClicks, 0);

        return {
          ads: adsWithTotals,
          totalViews,
          totalClicks
        };
      } catch (err) {
        console.error(err);
      }
    }

    function getTotalViews(dailyClicksViews, monthlyClicksViews) {
      let totalViews = 0;
      dailyClicksViews.forEach(item => {
        totalViews += item.views.length;
      });
      monthlyClicksViews.forEach(item => {
        totalViews += item.views.length;
      });
      return totalViews;
    }

    function getTotalClicks(dailyClicksViews, monthlyClicksViews) {
      let totalClicks = 0;
      dailyClicksViews.forEach(item => {
        totalClicks += item.clicks.length;
      });
      monthlyClicksViews.forEach(item => {
        totalClicks += item.clicks.length;
      });
      return totalClicks;
    }
  </script>
</body>

</html>